name: CI
on:
  # See the documentation for more intricate event dispatch here:
  # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
  push:
    branches:
    - "!dependabot/*"
    - "*"
  pull_request:
    branches:
    - "*"
jobs:
  build:
    name: Format
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black==22.3.0
        pip install flake8
    - name: Check Formatting (Black)
      run: |
        black --line-length=100 --target-version=py39 --check --diff .
    - name: Check Formatting (Flake8)
      run: |
        # The code-base needs to be cleaned up. There are too many Flake8
        # related warnings now. Ignore known problems to catch new ones.
        flake8 --ignore=C901,E203,E262,E265,E266,E402,E501,E712,E713,E722,E731,E741,F401,F403,F405,F811,F821,F841,W503
        # Run full scan for visibility purposes.
        flake8 --exit-zero
    - name: Check Requirements are pinned
      run: |
        # Read each line of requirement.txt and flag if any line doesn't contain ==, @, newline, or #
        sed '/^$/d' < requirements.txt | while read i; do if [[ ! $i =~ [==|@|^#] ]]; then echo $i is not pinned; fi; done
  unit:
    name: Unit Test
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        platform: ['amd64','ppc64le']
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup SSH config for builders
      env:
        BUILDER_PPC64LE_SSH_CONFIG: ${{ secrets.BUILDER_PPC64LE_SSH_CONFIG }}
        BUILDER_PPC64LE_SSH_KEY: ${{ secrets.BUILDER_PPC64LE_SSH_KEY }}
        BUILDER_PPC64LE_SSH_KNOWN_HOSTS: ${{ secrets.BUILDER_PPC64LE_SSH_KNOWN_HOSTS }}
      run: |
        mkdir ~/.ssh
        chmod 700 ~/.ssh
        touch ~/.ssh/id_builder_ppc64le
        chmod 600 ~/.ssh/id_builder_ppc64le
        echo "$BUILDER_PPC64LE_SSH_KEY" >~/.ssh/id_builder_ppc64le
        touch ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        cat >~/.ssh/known_hosts <<END
        $BUILDER_PPC64LE_SSH_KNOWN_HOSTS
        END
        touch ~/.ssh/config
        chmod 600 ~/.ssh/config
        cat >~/.ssh/config <<END
        Host builder-ppc64le
          ServerAliveInterval 200
          ServerAliveCountMax 10
          IdentityFile "~/.ssh/id_builder_ppc64le"
        $BUILDER_PPC64LE_SSH_CONFIG
        END
    - name: Create docker context
      if: ${{ matrix.platform  != 'amd64' }}
      run: |
        docker context create ${{ matrix.platform }} --description "Node ${{ matrix.platform }}" --docker "host=ssh://builder-${{ matrix.platform }}"
        docker context use ${{ matrix.platform }}
    - name: Install dependencies and run tests
      run: >-
        docker run
        --rm
        -w /
        -e GH_REPOSITORY
        -e GH_REF
        ubuntu:20.04
        /bin/bash -c '
        export DEBIAN_FRONTEND=noninteractive;
        apt-get -y update;
        apt-get -y install libgpgme-dev libldap2-dev libsasl2-dev swig python3.9-dev python3-pip findutils git;
        apt-get -y install libffi-dev libssl-dev libjpeg-dev;
        git clone ${GH_REPOSITORY} build;
        cd build  && git checkout ${GH_REF};
        cat requirements-dev.txt | grep tox | xargs pip install;
        tox -e py39-unit;'
      env:
        GH_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        GH_REF: ${{ github.ref }}